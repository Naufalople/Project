#include <iostream>
#include <stdio.h>
#include <cstring>

using namespace std;

struct pasien
{
    char nama_pasien[100], keluhan[50];
    int umur_pasien,id_pasien, tgl_pasien;
    pasien *next;
};
pasien *kepalapasien = NULL, *bantupasien, *nodepasien, *hapuspasien;

struct dokter
{
    char nama_dokter[100], spesialis[50];
    int umur_dokter, id_dokter, tgl_dokter;
    dokter *next;
};
dokter *kepaladokter = NULL, *bantudokter, *nodedokter, *hapuskunjungan;

bool cekidpasiendouble(int id_pasien) {
    if (kepalapasien == NULL) {
        return false;
    }

    bantupasien = kepalapasien;
    while (bantupasien != NULL) {
        if (bantupasien->id_pasien == id_pasien) {
            return true;}
        bantupasien = bantupasien->next;}
    return false;
}

bool cekdokterdouble(int id_dokter) {
    if (kepaladokter == NULL) {
        return false;
    }

    bantudokter = kepaladokter;
    while (bantudokter != NULL) {
        if (bantudokter->id_dokter == id_dokter) {
            return true;}
        bantudokter = bantudokter->next;}
    return false;
}

void Linkedlist_pasien(char nama_pasien[100], char keluhan[50], int umur_pasien, int id_pasien, int tgl_pasien)
{
    if (cekidpasiendouble(id_pasien)) {
    cout << "Error: ID Pasien " << id_pasien << " sudah terdaftar dalam sistem!" << endl;
    cout << "Silakan gunakan ID pasien yang berbeda." << endl;
    cin.get();
    return;}

    kepalapasien = new pasien();
    strcpy(kepalapasien->nama_pasien, nama_pasien);
    strcpy(kepalapasien->keluhan, keluhan);
    kepalapasien->umur_pasien = umur_pasien;
    kepalapasien->id_pasien = id_pasien;
    kepalapasien->tgl_pasien = tgl_pasien;
    kepalapasien->next = NULL;
}

void Linkedlist_dokter(char nama_dokter[100], char spesialis[50], int umur_dokter, int id_dokter, int tgl_dokter)
{
    if (cekdokterdouble(id_dokter)) {
    cout << "Error: ID Dokter " << id_dokter << " sudah terdaftar dalam sistem!" << endl;
    cout << "Silakan gunakan ID dokter yang berbeda." << endl;
    cin.get();
    return;}

    kepaladokter = new dokter();
    strcpy(kepaladokter->nama_dokter, nama_dokter);
    strcpy(kepaladokter->spesialis, spesialis);
    kepaladokter->umur_dokter = umur_dokter;
    kepaladokter->id_dokter = id_dokter;
    kepaladokter->tgl_dokter = tgl_dokter;
    kepaladokter->next = NULL;
}

bool tambahakhir_pasien(char nama_pasien[100], char keluhan[50], int umur_pasien, int id_pasien, int tgl_pasien)
{
    if (cekidpasiendouble(id_pasien)) {
    cout << "Error: ID Pasien " << id_pasien << " sudah terdaftar dalam sistem!" << endl;
    cout << "Silakan gunakan ID pasien yang berbeda." << endl;
    cin.get();
    return false;}
    
    nodepasien = new pasien();
    strcpy(nodepasien->nama_pasien, nama_pasien);
    strcpy(nodepasien->keluhan, keluhan);
    nodepasien->umur_pasien = umur_pasien;
    nodepasien-> id_pasien =  id_pasien;
    nodepasien-> tgl_pasien =  tgl_pasien;
    nodepasien->next = NULL;

    if (kepalapasien == NULL){
        kepalapasien = nodepasien;}
    else
    {
        bantupasien = kepalapasien;
        while (bantupasien->next != NULL){
            bantupasien = bantupasien->next;}
        bantupasien->next = nodepasien;}
        return true;
}

bool tambahakhir_dokter(char nama_dokter[100], char spesialis[50], int umur_dokter, int id_dokter, int tgl_dokter)
{
    if (cekdokterdouble(id_dokter)) {
    cout << "Error: ID Dokter " << id_dokter << " sudah terdaftar dalam sistem!" << endl;
    cout << "Silakan gunakan ID dokter yang berbeda." << endl;
    cin.get();
    return false;}

    nodedokter = new dokter();
    strcpy(nodedokter->nama_dokter, nama_dokter);
    strcpy(nodedokter->spesialis, spesialis);
    nodedokter->umur_dokter = umur_dokter;
    nodedokter-> id_dokter =  id_dokter;
    nodedokter-> tgl_dokter =  tgl_dokter;
    nodedokter->next = NULL;

    if (kepaladokter == NULL){
        kepaladokter = nodedokter;}
    else
    {
        bantudokter = kepaladokter;
        while (bantudokter->next != NULL){
            bantudokter = bantudokter->next;}
        bantudokter->next = nodedokter;}
        return true;
}

void simpanpasienkefile() {
    FILE *ptr = fopen("data_pasien.txt", "w");
    if (ptr == NULL) {
        cout << "Gagal membuka file untuk pasien.\n";
        return;}

    pasien *temp = kepalapasien;
    while (temp != NULL) {
        fprintf(ptr, "%d|%s|%d|%d|%s\n", temp->id_pasien, temp->nama_pasien, temp->umur_pasien, temp->tgl_pasien, temp->keluhan);
        temp = temp->next;}

    fclose(ptr);
    cout << "Data pasien berhasil disimpan ke file.\n";
    cin.get();
}

void simpandokterkefile() {
    FILE *ptr = fopen("data_dokter.txt", "w");
    if (ptr == NULL) {
        cout << "Gagal membuka file untuk dokter.\n";
        return;}

    dokter *temp = kepaladokter;
    while (temp != NULL) {
        fprintf(ptr, "%d|%s|%d|%d|%s\n", temp->id_dokter, temp->nama_dokter, temp->umur_dokter, temp->tgl_dokter, temp->spesialis);
        temp = temp->next;}

    fclose(ptr);
    cout << "Data dokter berhasil disimpan ke file.\n";
    cin.get();
}

void loadpasiendarifile() {
    system("cls");
    FILE *ptr = fopen("data_pasien.txt", "r");
    if (ptr == NULL) return;

    int id, umur, tgl;
    char nama[100], keluhan[50];
    while (fscanf(ptr, "%d|%[^|]|%d|%d|%[^\n]\n", &id, nama, &umur, &tgl, keluhan) == 5) {
    tambahakhir_pasien(nama, keluhan, umur, id, tgl);}

    fclose(ptr);
}

void loaddokterdarifile() {
    FILE *ptr = fopen("data_dokter.txt", "r");
    if (ptr == NULL) return;

    int id, umur, tgl;
    char nama[100], spesialis[50];
    while (fscanf(ptr, "%d|%[^|]|%d|%d|%[^\n]\n", &id, nama, &umur, &tgl, spesialis) == 5) {
        tambahakhir_dokter(nama, spesialis, umur, id, tgl);}

    fclose(ptr);
}

void tampilpasien() {
    system("cls");
    
    struct TempPasien {
        int id_pasien,umur_pasien, tgl_pasien;
        char nama_pasien[100], keluhan[50];};
    
    FILE *file = fopen("data_pasien.txt", "r");
    if (file == NULL) {
    cout << "Gagal membuka file data_pasien.txt!" << endl;
    cin.get();
    return;
    }
    
    int jumlahPasien = 0;
    char baris[256];
    while (fgets(baris, sizeof(baris), file) != NULL) {
    jumlahPasien++;}
    fclose(file);
    
    if (jumlahPasien == 0) {
    cout << "Tidak ada data pasien dalam file." << endl;
    cin.get();
    cin.get();
    return;}
    
    TempPasien *daftarPasien = new TempPasien[jumlahPasien];
    
    file = fopen("data_pasien.txt", "r");
    if (file == NULL) {
        cout << "Gagal membuka file data_pasien.txt!" << endl;
        delete[] daftarPasien;
        cin.get();
        return;}
    
    int hitung = 0;
    while (hitung < jumlahPasien && fscanf(file, "%d|%[^|]|%d|%d|%[^\n]\n", &daftarPasien[hitung].id_pasien, daftarPasien[hitung].nama_pasien, 
        &daftarPasien[hitung].umur_pasien, &daftarPasien[hitung].tgl_pasien, daftarPasien[hitung].keluhan) == 5) {
        hitung++;}
    fclose(file);
    
    for (int i = 0; i < jumlahPasien - 1; i++) {
        
        for (int j = 0; j < jumlahPasien - i - 1; j++) {
        if (daftarPasien[j].id_pasien > daftarPasien[j + 1].id_pasien) {
        swap(daftarPasien[j], daftarPasien[j + 1]);}}}

    cout << endl <<"======= Data Pasien Berdasarkan Id =======" << endl;
    cout << "==========================================" << endl;
    for (int i = 0; i < jumlahPasien; i++) {
        cout << i + 1 << ". ID: " << daftarPasien[i].id_pasien << endl;
        cout << "   Nama: " << daftarPasien[i].nama_pasien << endl;
        cout << "   Umur: " << daftarPasien[i].umur_pasien << endl;
        cout << "   Tanggal Datang: " << daftarPasien[i].tgl_pasien << endl;
        cout << "   Keluhan: " << daftarPasien[i].keluhan << endl;
        cout << "-----------------------------------------" << endl;}
    
    delete[] daftarPasien;
    
    cout << endl << "Tekan Enter untuk kembali ke menu...";
    cin.get();
    cin.get();
}

void tampildokter(){
    system("cls");
    
    struct Tempdokter {
        int id_dokter, umur_dokter, tgl_dokter;
        char nama_dokter[100], spesialis[50];};
    
    FILE *file = fopen("data_dokter.txt", "r");
    if (file == NULL) {
    cout << "Gagal membuka file data_dokter.txt!" << endl;
    cin.get();
    return;}
    int jumlahdokter = 0;
    char baris[256];
    while (fgets(baris, sizeof(baris), file) != NULL) {
    jumlahdokter++;}
    fclose(file);
    
    if (jumlahdokter == 0) {
    cout << "Tidak ada data dokter dalam file." << endl;
    cin.get();
    cin.get();
    return;}
    
    Tempdokter *daftardokter = new Tempdokter[jumlahdokter];
    
    file = fopen("data_dokter.txt", "r");
    if (file == NULL) {
        cout << "Gagal membuka file data_dokter.txt!" << endl;
        delete[] daftardokter;
        cin.get();
        return;}
    
    int hitung = 0;
    while (hitung < jumlahdokter && fscanf(file, "%d|%[^|]|%d|%d|%[^\n]\n", &daftardokter[hitung].id_dokter, daftardokter[hitung].nama_dokter, 
        &daftardokter[hitung].umur_dokter, &daftardokter[hitung].tgl_dokter, daftardokter[hitung].spesialis) == 5) {
        hitung++;}
    fclose(file);
    
    for (int i = 0; i < jumlahdokter - 1; i++) {
        for (int j = 0; j < jumlahdokter - i - 1; j++) {
        if (daftardokter[j].id_dokter > daftardokter[j + 1].id_dokter){
        swap(daftardokter[j], daftardokter[j + 1]);}}}

    cout << endl << "======= Data dokter Berdasarkan Id =======" << endl;
    cout << "==========================================" << endl;
    for (int i = 0; i < jumlahdokter; i++) {
        cout << i + 1 << ". ID: " << daftardokter[i].id_dokter << endl;
        cout << "   Nama: " << daftardokter[i].nama_dokter << endl;
        cout << "   Umur: " << daftardokter[i].umur_dokter << endl;
        cout << "   Tanggal Datang: " << daftardokter[i].tgl_dokter << endl;
        cout << "   spesialis: " << daftardokter[i].spesialis << endl;
        cout << "-----------------------------------------\n";}
    
    delete[] daftardokter;
    
    cout << "\nTekan Enter untuk kembali ke menu...";
    cin.get();
    cin.get();
}

void tampilkandata(){
    int menu;
    do
    {
    system("cls");
    cout << "data mana yang ingin di tampilkan"<< endl;
    cout << "1. Pasien"<< endl;
    cout << "2. Dokter"<< endl;
    cout << "3. keluar" << endl;
    cout << "pilih menu: ";
    cin >> menu;
    switch (menu)
    {
    case 1:
    tampilpasien();
    break;
    case 2:
    tampildokter();
    break;
    case 3:
    break;
    default:
    break;
    }
    } while (menu != 3);
}

void hapus_pasien(char cari_pasien[100]) {
    bool ditemukan = false;
    pasien *sebelum = NULL;
    bantupasien = kepalapasien;

    while (bantupasien != NULL) {
        if (strcmp(bantupasien->nama_pasien, cari_pasien) == 0) {
            ditemukan = true;
            if (bantupasien == kepalapasien) {
                kepalapasien = bantupasien->next;
            } else {
                sebelum->next = bantupasien->next;
            }
            delete bantupasien;
            break;
        }
        sebelum = bantupasien;
        bantupasien = bantupasien->next;
    }

    if (ditemukan) {
        FILE *ptr = fopen("data_pasien.txt", "w");
        if (ptr == NULL) {
            cout << "Gagal membuka file untuk pasien.\n";
            cout << "Pasien dihapus dari memori tapi tidak dari file.\n";
            cin.get();
            return;
        }

        bantupasien = kepalapasien;
        while (bantupasien != NULL) {
            fprintf(ptr, "%d|%s|%d|%d|%s\n", bantupasien->id_pasien, bantupasien->nama_pasien, bantupasien->umur_pasien, 
                    bantupasien->tgl_pasien, bantupasien->keluhan);
            bantupasien = bantupasien->next;
        }

        fclose(ptr);
        cout << "Pasien dengan nama " << cari_pasien << " berhasil dihapus dari file.\n";
    } else {
        cout << "Pasien dengan nama " << cari_pasien << " tidak ditemukan.\n";
    }
    
    cin.get();
}

void hapus_dokter(char cari_dokter[100]) {
    bool ditemukan = false;
    dokter *sebelum = NULL;
    bantudokter = kepaladokter;

    while (bantudokter != NULL) {
        if (strcmp(bantudokter->nama_dokter, cari_dokter) == 0) {
            ditemukan = true;
            if (bantudokter == kepaladokter) {
                kepaladokter = bantudokter->next;
            } else {
                sebelum->next = bantudokter->next;
            }
            delete bantudokter;
            break;
        }
        sebelum = bantudokter;
        bantudokter = bantudokter->next;
    }

    if (ditemukan) {
        FILE *ptr = fopen("data_dokter.txt", "w");
        if (ptr == NULL) {
            cout << "Gagal membuka file untuk dokter.\n";
            cout << "dokter dihapus dari memori tapi tidak dari file.\n";
            cin.get();
            return;
        }

        bantudokter = kepaladokter;
        while (bantudokter != NULL) {
            fprintf(ptr, "%d|%s|%d|%d|%s\n", bantudokter->id_dokter, bantudokter->nama_dokter, bantudokter->umur_dokter, 
                    bantudokter->tgl_dokter, bantudokter->spesialis);
            bantudokter = bantudokter->next;
        }

        fclose(ptr);
        cout << "dokter dengan nama " << cari_dokter << " berhasil dihapus dari file.\n";
    } else {
        cout << "dokter dengan nama " << cari_dokter << " tidak ditemukan.\n";
    }
    
    cin.get();
}

void cari_pasien(char nama_pasien[100]) {
    system("cls");

    struct TempPasien {
        int id_pasien, umur_pasien, tgl_pasien;
        char nama_pasien[100], keluhan[50];
    };
    
    FILE *file = fopen("data_pasien.txt", "r");
    if (file == NULL) {
        cout << "Gagal membuka file data_pasien.txt!" << endl;
        cin.get();
        return;
    }
    
    int jumlahPasien = 0;
    char baris[256];
    while (fgets(baris, sizeof(baris), file) != NULL) {
        jumlahPasien++;
    }
    fclose(file);
    
    if (jumlahPasien == 0) {
        cout << "Tidak ada data pasien dalam file." << endl;
        cin.get();
        return;
    }
    
    TempPasien *daftarPasien = new TempPasien[jumlahPasien];
    
    file = fopen("data_pasien.txt", "r");
    if (file == NULL) {
        cout << "Gagal membuka file data_pasien.txt!" << endl;
        delete[] daftarPasien;
        cin.get();
        return;
    }
    
    int hitung = 0;
    while (hitung < jumlahPasien && fscanf(file, "%d|%[^|]|%d|%d|%[^\n]\n", &daftarPasien[hitung].id_pasien, daftarPasien[hitung].nama_pasien, 
           &daftarPasien[hitung].umur_pasien, &daftarPasien[hitung].tgl_pasien, daftarPasien[hitung].keluhan) == 5) {
        hitung++;}
    fclose(file);
    
    cout << endl << "======= Hasil Pencarian Pasien =======" << endl;
    cout << "========================================" << endl;
    
    bool ditemukan = false;
    for (int i = 0; i < jumlahPasien; i++) {
        if (strstr(daftarPasien[i].nama_pasien, nama_pasien) != NULL) {
            ditemukan = true;
            cout << "ID: " << daftarPasien[i].id_pasien << endl;
            cout << "Nama: " << daftarPasien[i].nama_pasien << endl;
            cout << "Umur: " << daftarPasien[i].umur_pasien << endl;
            cout << "Tanggal Datang: " << daftarPasien[i].tgl_pasien << endl;
            cout << "Keluhan: " << daftarPasien[i].keluhan << endl;
            cout << "----------------------------------------" << endl;
        }
    }
    
    if (!ditemukan) {
        cout << "Tidak ditemukan pasien dengan nama \"" << nama_pasien << "\"" << endl;
    }
    
    delete[] daftarPasien;
    
    cout << endl << "Tekan Enter untuk kembali ke menu...";
    cin.get();
}

void cari_dokter(char nama_dokter[100]) {
    system("cls");
    
    struct TempDokter {
        int id_dokter, umur_dokter, tgl_dokter;
        char nama_dokter[100], spesialis[50];
    };
    
    FILE *file = fopen("data_dokter.txt", "r");
    if (file == NULL) {
        cout << "Gagal membuka file data_dokter.txt!" << endl;
        cin.get();
        return;
    }
    
    int jumlahDokter = 0;
    char baris[256];
    while (fgets(baris, sizeof(baris), file) != NULL) {
        jumlahDokter++;
    }
    fclose(file);
    
    if (jumlahDokter == 0) {
        cout << "Tidak ada data dokter dalam file." << endl;
        cin.get();
        return;
    }
    
    TempDokter *daftarDokter = new TempDokter[jumlahDokter];
    
    file = fopen("data_dokter.txt", "r");
    if (file == NULL) {
        cout << "Gagal membuka file data_dokter.txt!" << endl;
        delete[] daftarDokter;
        cin.get();
        return;
    }
    
    int hitung = 0;
    while (hitung < jumlahDokter && fscanf(file, "%d|%[^|]|%d|%d|%[^\n]\n", 
           &daftarDokter[hitung].id_dokter, 
           daftarDokter[hitung].nama_dokter, 
           &daftarDokter[hitung].umur_dokter, 
           &daftarDokter[hitung].tgl_dokter, 
           daftarDokter[hitung].spesialis) == 5) {
        hitung++;
    }
    fclose(file);
    
    cout << endl << "======= Hasil Pencarian Dokter =======" << endl;
    cout << "========================================" << endl;
    
    bool ditemukan = false;
    for (int i = 0; i < jumlahDokter; i++) {
        if (strstr(daftarDokter[i].nama_dokter, nama_dokter) != NULL) {
            ditemukan = true;
            cout << "ID: " << daftarDokter[i].id_dokter << endl;
            cout << "Nama: " << daftarDokter[i].nama_dokter << endl;
            cout << "Umur: " << daftarDokter[i].umur_dokter << endl;
            cout << "Tanggal Datang: " << daftarDokter[i].tgl_dokter << endl;
            cout << "Spesialis: " << daftarDokter[i].spesialis << endl;
            cout << "----------------------------------------" << endl;
        }
    }
    
    if (!ditemukan) {
        cout << "Tidak ditemukan dokter dengan nama \"" << nama_dokter << "\"" << endl;
    }
    
    delete[] daftarDokter;
    
    cout << endl << "Tekan Enter untuk kembali ke menu...";
    cin.get();
}

void edit_pasien(char nama_dicari[100]) {
    system("cls");
    bool ditemukan = false;

    struct TempPasien {
        int id_pasien, umur_pasien, tgl_pasien;
        char nama_pasien[100], keluhan[50];
    };

    FILE *file = fopen("data_pasien.txt", "r");
    if (file == NULL) {
        cout << "Gagal membuka file data_pasien.txt!" << endl;
        return;
    }

    int jumlah = 0;
    char baris[256];
    while (fgets(baris, sizeof(baris), file)) jumlah++;
    rewind(file);

    TempPasien *daftar = new TempPasien[jumlah];
    int isi = 0;
    while (fscanf(file, "%d|%[^|]|%d|%d|%[^\n]\n", &daftar[isi].id_pasien, daftar[isi].nama_pasien,
                  &daftar[isi].umur_pasien, &daftar[isi].tgl_pasien, daftar[isi].keluhan) == 5) {
        isi++;
    }
    fclose(file);

    for (int i = 0; i < isi; i++) {
        if (strstr(daftar[i].nama_pasien, nama_dicari) != NULL) {
            ditemukan = true;
            cout << "\nData lama untuk pasien: " << daftar[i].nama_pasien << endl;
            cout << "ID: " << daftar[i].id_pasien << endl;
            cout << "Umur: " << daftar[i].umur_pasien << endl;
            cout << "Tanggal Datang: " << daftar[i].tgl_pasien << endl;
            cout << "Keluhan: " << daftar[i].keluhan << endl;

            cout << "\nMasukkan data baru:" << endl;
            cout << "Nama: ";
            cin.getline(daftar[i].nama_pasien, 100);

            int id_baru;
            bool id_sama;
            do {
                id_sama = false;
                cout << "ID: ";
                cin >> id_baru;
                for (int k = 0; k < isi; k++) {
                    if (k != i && daftar[k].id_pasien == id_baru) {
                        cout << "Error: ID " << id_baru << " sudah digunakan pasien lain!\n";
                        id_sama = true;
                        break;
                    }
                }
            } while (id_sama);
            daftar[i].id_pasien = id_baru;

            cout << "Umur: ";
            cin >> daftar[i].umur_pasien;
            cout << "Tanggal Datang: ";
            cin >> daftar[i].tgl_pasien;
            cin.ignore();
            cout << "Keluhan: ";
            cin.getline(daftar[i].keluhan, 50);
        }
    }

    if (ditemukan) {
        FILE *save = fopen("data_pasien.txt", "w");
        if (save == NULL) {
            cout << "Gagal menyimpan data!" << endl;
            delete[] daftar;
            return;
        }

        for (int i = 0; i < isi; i++) {
            fprintf(save, "%d|%s|%d|%d|%s\n", daftar[i].id_pasien, daftar[i].nama_pasien,
                    daftar[i].umur_pasien, daftar[i].tgl_pasien, daftar[i].keluhan);
        }

        fclose(save);
        cout << "\nData pasien berhasil diperbarui.\n";

        while (kepalapasien != NULL) {
            pasien *hapus = kepalapasien;
            kepalapasien = kepalapasien->next;
            delete hapus;
        }
        loadpasiendarifile();
    } else {
        cout << "Pasien tidak ditemukan.\n";
    }

    delete[] daftar;
    cout << "\nTekan Enter untuk kembali...";
    cin.get();
}

void edit_dokter(char nama_dicari[100]) {
    system("cls");
    bool ditemukan = false;

    struct TempDokter {
        int id_dokter, umur_dokter, tgl_dokter;
        char nama_dokter[100], spesialis[50];
    };

    FILE *file = fopen("data_dokter.txt", "r");
    if (file == NULL) {
        cout << "Gagal membuka file data_dokter.txt!" << endl;
        return;
    }

    int jumlah = 0;
    char baris[256];
    while (fgets(baris, sizeof(baris), file)) jumlah++;
    rewind(file);

    TempDokter *daftar = new TempDokter[jumlah];
    int isi = 0;
    while (fscanf(file, "%d|%[^|]|%d|%d|%[^\n]\n", &daftar[isi].id_dokter, daftar[isi].nama_dokter,
                  &daftar[isi].umur_dokter, &daftar[isi].tgl_dokter, daftar[isi].spesialis) == 5) {
        isi++;
    }
    fclose(file);

    for (int i = 0; i < isi; i++) {
        if (strstr(daftar[i].nama_dokter, nama_dicari) != NULL) {
            ditemukan = true;
            cout << "\nData lama untuk dokter: " << daftar[i].nama_dokter << endl;
            cout << "ID: " << daftar[i].id_dokter << endl;
            cout << "Umur: " << daftar[i].umur_dokter << endl;
            cout << "Tanggal Datang: " << daftar[i].tgl_dokter << endl;
            cout << "Spesialis: " << daftar[i].spesialis << endl;

            cout << "\nMasukkan data baru:" << endl;
            cout << "Nama: ";
            cin.getline(daftar[i].nama_dokter, 100);

            int id_baru;
            bool id_sama;
            do {
                id_sama = false;
                cout << "ID: ";
                cin >> id_baru;
                for (int k = 0; k < isi; k++) {
                    if (k != i && daftar[k].id_dokter == id_baru) {
                        cout << "Error: ID " << id_baru << " sudah digunakan dokter lain!\n";
                        id_sama = true;
                        break;
                    }
                }
            } while (id_sama);
            daftar[i].id_dokter = id_baru;

            cout << "Umur: ";
            cin >> daftar[i].umur_dokter;
            cout << "Tanggal Datang: ";
            cin >> daftar[i].tgl_dokter;
            cin.ignore();
            cout << "Spesialis: ";
            cin.getline(daftar[i].spesialis, 50);
        }
    }

    if (ditemukan) {
        FILE *save = fopen("data_dokter.txt", "w");
        if (save == NULL) {
            cout << "Gagal menyimpan data!" << endl;
            delete[] daftar;
            return;
        }

        for (int i = 0; i < isi; i++) {
            fprintf(save, "%d|%s|%d|%d|%s\n", daftar[i].id_dokter, daftar[i].nama_dokter,
                    daftar[i].umur_dokter, daftar[i].tgl_dokter, daftar[i].spesialis);
        }

        fclose(save);
        cout << "\nData dokter berhasil diperbarui.\n";

        while (kepaladokter != NULL) {
            dokter *hapus = kepaladokter;
            kepaladokter = kepaladokter->next;
            delete hapus;
        }
        loaddokterdarifile();
    } else {
        cout << "Dokter tidak ditemukan.\n";
    }

    delete[] daftar;
    cout << "\nTekan Enter untuk kembali...";
    cin.get();
}

void kunjungan() {
    system("cls");

    struct TempPasien {
        int id_pasien, umur_pasien, tgl_pasien;
        char nama_pasien[100], keluhan[50];
    };

    struct TempDokter {
        int id_dokter, umur_dokter, tgl_dokter;
        char nama_dokter[100], spesialis[50];
    };

    FILE *file_pasien = fopen("data_pasien.txt", "r");
    FILE *file_dokter = fopen("data_dokter.txt", "r");

    if (!file_pasien || !file_dokter) {
        cout << "Gagal membuka file pasien atau dokter.\n";
        cin.get();
        return;
    }

    int jumlah_pasien = 0, jumlah_dokter = 0;
    char baris[256];

    while (fgets(baris, sizeof(baris), file_pasien)) jumlah_pasien++;
    rewind(file_pasien);

    while (fgets(baris, sizeof(baris), file_dokter)) jumlah_dokter++;
    rewind(file_dokter);

    TempPasien *pasien_list = new TempPasien[jumlah_pasien];
    TempDokter *dokter_list = new TempDokter[jumlah_dokter];

    int pasien = 0;
    while (fscanf(file_pasien, "%d|%[^|]|%d|%d|%[^\n]\n",&pasien_list[pasien].id_pasien,pasien_list[pasien].nama_pasien,
        &pasien_list[pasien].umur_pasien,&pasien_list[pasien].tgl_pasien,pasien_list[pasien].keluhan) == 5) {
        pasien++;}
    fclose(file_pasien);

    int dokter = 0;
    while (fscanf(file_dokter, "%d|%[^|]|%d|%d|%[^\n]\n",&dokter_list[dokter].id_dokter,dokter_list[dokter].nama_dokter,
        &dokter_list[dokter].umur_dokter,&dokter_list[dokter].tgl_dokter,dokter_list[dokter].spesialis) == 5) {
        dokter++;}
    fclose(file_dokter);

    for (int i = 0; i < pasien - 1; i++) {
        for (int j = 0; j < pasien - i - 1; j++) {
            if (pasien_list[j].tgl_pasien > pasien_list[j + 1].tgl_pasien) {
                swap(pasien_list[j], pasien_list[j + 1]);}}}

    for (int i = 0; i < dokter - 1; i++) {
        for (int j = 0; j < dokter - i - 1; j++) {
            if (dokter_list[j].tgl_dokter > dokter_list[j + 1].tgl_dokter) {
                swap(dokter_list[j], dokter_list[j + 1]);}}}

    cout << "\n=== DAFTAR PASIEN BERDASARKAN TANGGAL DATANG ===\n";
    for (int i = 0; i < pasien; i++) {
        cout << i + 1 << ". Nama: " << pasien_list[i].nama_pasien << endl;
        cout << "   Umur: " << pasien_list[i].umur_pasien << endl;
        cout << "   Tanggal Datang: " << pasien_list[i].tgl_pasien << endl;
        cout << "   Keluhan: " << pasien_list[i].keluhan << endl;
        cout << "----------------------------------------------\n";}

    cout << "\n=== DAFTAR DOKTER BERDASARKAN TANGGAL DATANG ===\n";
    for (int i = 0; i < dokter; i++) {
        cout << i + 1 << ". Nama: " << dokter_list[i].nama_dokter << endl;
        cout << "   Umur: " << dokter_list[i].umur_dokter << endl;
        cout << "   Tanggal Datang: " << dokter_list[i].tgl_dokter << endl;
        cout << "   Spesialis: " << dokter_list[i].spesialis << endl;
        cout << "-----------------------------------------------\n";}

    delete[] pasien_list;
    delete[] dokter_list;

    cout << "\nTekan Enter untuk kembali ke menu...";
    cin.get();
}

int main(){
    int pilih, umur_pasien, id_pasien, umur_dokter, id_dokter, tgl_pasien, tgl_dokter;
    char nama_pasien[100], nama_dokter[100], keluhan[50], spesialis[50];
    loadpasiendarifile();
    loaddokterdarifile();
    
    do
    {
        system("cls");
        cout << "--------------Menu--------------" << endl;
        cout << "1. Buat Linked List pasien" << endl;
        cout << "2. Buat Linked List dokter" << endl;
        cout << "3. Tambah pasien di Akhir " << endl;
        cout << "4. Tambah dokter di Akhir " << endl;
        cout << "5. Hapus pasien" << endl;
        cout << "6. Hapus dokter" << endl;
        cout << "7. cari pasien" << endl;
        cout << "8. cari dokter" << endl;
        cout << "9. tampilkan data" <<  endl;
        cout << "10. edit pasien" <<  endl;
        cout << "11. edit dokter" <<  endl;
        cout << "12. list kunjungan" << endl;
        cout << "13. keluar program" <<  endl;
        cout << "pilih menu: ";
        cin >> pilih;
        cin.ignore();
    
        switch (pilih)
        {
        case 1:
            if (kepalapasien != NULL)
                {cout << "Linked list sudah di buat" << endl ;
                cin.get();
                break;}
            cout << "nama pasien: ";
            cin.getline(nama_pasien, 100);
            cout << "keluhan pasien: ";
            cin.getline(keluhan, 50);
            cout << "umur pasien: ";
            cin >> umur_pasien;
            cout << "id pasien: ";
            cin >> id_pasien;
            cout << "tanggal dateng pasien: ";
            cin >> tgl_pasien;
            Linkedlist_pasien(nama_pasien, keluhan, umur_pasien, id_pasien, tgl_pasien);
            cout << "Linked list berhasil dibuat!\n";
            simpanpasienkefile();
            cin.get();
            system("cls");
            break;

        case 2:
        if (kepaladokter != NULL)
            {cout << "Linked list sudah di buat" << endl ;
            cin.get();
            break;}
        cout << "nama dokter: ";
        cin.getline(nama_dokter, 100);
        cout << "spesialis dokter: ";
        cin.getline(spesialis, 50);
        cout << "umur dokter: ";
        cin >> umur_dokter;
        cout << "id dokter: ";
        cin >> id_dokter;
        cout << "tanggal dateng dokter: ";
        cin >> tgl_dokter;
        Linkedlist_dokter(nama_dokter, spesialis, umur_dokter, id_dokter, tgl_dokter);
        cout << "Linked list berhasil dibuat!\n";
        simpandokterkefile();
        cin.get();
        system("cls");
        break;

        case 3:
            cout << "nama pasien: ";
            cin.getline(nama_pasien, 100);
            cout << "keluhan pasien: ";
            cin.getline(keluhan, 50);
            cout << "umur pasien: ";
            cin >> umur_pasien;
            cout << "id pasien: ";
            cin >> id_pasien;
            cout << "tanggal dateng pasien: ";
            cin >> tgl_pasien;
            cin.ignore();
            if (tambahakhir_pasien(nama_pasien, keluhan, umur_pasien, id_pasien, tgl_pasien))
            {simpanpasienkefile();}
            break;
        case 4:
            cout << "nama dokter: ";
            cin.getline(nama_dokter, 100);
            cout << "spesialis dokter: ";
            cin.getline(spesialis, 50);
            cout << "umur dokter: ";
            cin >> umur_dokter;
            cout << "id dokter: ";
            cin >> id_dokter;
            cout << "tanggal dateng dokter: ";
            cin >> tgl_dokter;
            if (tambahakhir_dokter(nama_dokter, spesialis, umur_dokter, id_dokter, tgl_dokter)){
                simpandokterkefile();}
            break;
        case 5:
            cout << "Masukkan nama pasien yang ingin dihapus: ";
            cin.getline(nama_pasien, 100);
            hapus_pasien(nama_pasien);
            break;
        case 6:
            cout << "Masukkan nama dokter yang ingin dihapus: ";
            cin.getline(nama_dokter, 100);
            hapus_dokter(nama_dokter);
            break;
        case 7:
            cout << "Masukkan nama pasien yang ingin dicari: ";
            cin.getline(nama_pasien, 100);
            cari_pasien(nama_pasien);
            break;
        case 8:
            cout << "Masukkan nama dokter yang ingin dicari: ";
            cin.getline(nama_dokter, 100);
            cari_dokter(nama_dokter);
            break;
        case 12:
            kunjungan();
            break;
        case 9:
            tampilkandata();
            break;
        case 10:
            cout << "Masukkan nama pasien yang ingin diedit datanya: ";
            cin.getline(nama_pasien, 100);
            edit_pasien(nama_pasien);
            break;
        case 11:
            cout << "Masukkan nama dokter yang ingin diedit datanya: ";
            cin.getline(nama_dokter, 100);
            edit_dokter(nama_dokter);
            break;
        case 13:
            cout << "keluar dari program" << endl;
            break;
        default:
        cout << "pilihlah angka sesuai menu";
        cin.get();
            break;
        }
    } while (pilih != 13);
}
